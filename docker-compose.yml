version: '3'
services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ZOO_SERVER_ID=1
      - ZOO_PORT_NUMBER=2181
      - ZOO_SERVERS=server.1=zookeeper:2888:3888
      - ZOO_4LW_COMMANDS_WHITELIST=dump, srvr, mntr
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - application-backend-network

  kafka-broker:
    image: 'bitnami/kafka:latest'
    hostname: kafka-broker
    container_name: kafka-broker
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-broker:19092,EXTERNAL://kafka-broker:9092
      - KAFKA_CFG_LISTENERS=INTERNAL://kafka-broker:19092,EXTERNAL://kafka-broker:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_TOPIC
    depends_on:
      - zookeeper
    networks:
      - application-backend-network

  kafka-setup:
    image: confluentinc/cp-kafka:5.2.7
    hostname: kafka-setup
    container_name: kafka-setup
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
              cub kafka-ready -b kafka-broker:19092 1 20 && \
              kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 3 --replication-factor 1 --topic patient && \
              echo Waiting 60 seconds for Connect to be ready... && \
              sleep 60 && \
              curl -i -X POST -H Accept:application/json -H Content-Type:application/json http://patient-connect:8083/connectors/ -d @/opt/docker/connectors/connector_patient.json'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    volumes:
      - ./DebeziumTransformer/connector_patient.json:/opt/docker/connectors/connector_patient.json
    depends_on:
      - kafka-broker
    networks:
      - application-backend-network

  patient-connect:
    build: ./DebeziumTransformer/
    container_name: patient-connect
    hostname: patient-connect
    ports:
      - '8083:8083'
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: patient_connect_config
      OFFSET_STORAGE_TOPIC: patient_connect_offsets
      STATUS_STORAGE_TOPIC: patient_connect_status
      BOOTSTRAP_SERVERS: kafka-broker:9092
      ZOOKEEPER_CONNECTION: zookeeper:2181
    depends_on:
      - ed-gateway
      - kafka-broker
      - postgres-patient-db
    networks:
      - application-backend-network

  eureka:
    build: ./service-discovery/
    container_name: eureka
    ports:
      - "8761:8761"
    networks:
      - application-backend-network

  demo-service:
    build: ./demo/
    container_name: demo-service
    ports:
      - "5051:5051"
    env_file:
      - ./demo/.env
    depends_on:
      - patient-connect
      - ed-gateway
    networks:
      - application-backend-network

  ed-gateway:
    build: ./gateway/
    container_name: ed-gateway
    ports:
      - "8080:8080"
    env_file:
      - ./gateway/.env
    networks:
      - application-backend-network

  patient-service:
    image: ed-application/patient-service:1.0
    build: ./patient-management/
    container_name: patient-service
    ports:
      - "8081:8081"
    networks:
      - application-backend-network
    depends_on:
      - postgres-patient-db
      - ed-gateway
      - kafka-broker

  postgres-patient-db:
    image: postgres:12.3-alpine
    container_name: patient-db
    environment:
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=patient_db
    ports:
      # don't expose ports in production
      - "8050:5432"
    networks:
      - application-backend-network
    volumes:
      - ./database/Patient.sql:/docker-entrypoint-initdb.d/init.sql  # file name in docker container should also be changed right?
      - ./database/initOutboxSettings.sh:/docker-entrypoint-initdb.d/init.sh

networks:
  application-backend-network:
    driver: bridge
